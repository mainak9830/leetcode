class StockPrice {
public:
    int latest = 0;
    map<int, int> stockPrice;
    priority_queue<pair<int, int>> maxpq;
    priority_queue<pair<int, int>, vector<pair<int,int>>, greater<>> minpq;
    StockPrice() {
        
    }
    
    void update(int timestamp, int price) {
        maxpq.push({price, timestamp});
        minpq.push({price, timestamp});
        stockPrice[timestamp] = price;
        if(timestamp > latest)
            latest = timestamp;
        
    }
    
    int current() {
        return stockPrice[latest];
    }
    
    int maximum() {
        while(!maxpq.empty() && stockPrice[maxpq.top().second] != maxpq.top().first)
            maxpq.pop();
        return maxpq.top().first;
    }
    
    int minimum() {
        while(!minpq.empty() && stockPrice[minpq.top().second] != minpq.top().first)
            minpq.pop();
        return minpq.top().first;
    }
};

/**
 * Your StockPrice object will be instantiated and called as such:
 * StockPrice* obj = new StockPrice();
 * obj->update(timestamp,price);
 * int param_2 = obj->current();
 * int param_3 = obj->maximum();
 * int param_4 = obj->minimum();
 */
