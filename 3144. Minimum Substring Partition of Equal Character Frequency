class Solution {
public:
    int minimumSubstringsInPartition(string s) {
        
        int n = s.length();
        vector<int> dp(n+1, 0);

        dp[0] = 0;


        for(int i = 1;i <= n;i++){
            dp[i] = i;
            vector<int> dict(26, 0);
            
            for(int j = i;j >= 1;j--){
                dict[s[j-1]-'a']++;
                int minFreq = 1001, maxFreq = 0;
                for(int k = 0;k < 26;k++){
                    if(dict[k] > 0){
                        minFreq = min(minFreq, dict[k]);
                        maxFreq = max(maxFreq, dict[k]);
                    }
                }
                if(minFreq == maxFreq){

                    // cout << s.substr(j-1, i-j+1) << endl;
                    dp[i] = min(dp[i], dp[j-1] + 1);
                }
            }
        }

        return dp[n];
    }
};
