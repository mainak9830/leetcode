class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {

        vector<vector<int>> arr;

        for(int i = 0;i < n;i++){
            arr.push_back({speed[i], efficiency[i]});
        }

        sort(arr.begin(), arr.end(), [](const auto& a, const auto& b){
            return a[1] > b[1];
        });

        long long int performance = 0, sum = 0;
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        int i = 0;
        while(i < n){
            //cout << arr[i][0] << " " << arr[i][1] << endl;
            if(pq.size() < k){
                pq.push(arr[i]);
                sum += arr[i][0];
            }
            else if(pq.size() == k){
                
                if(arr[i][0] > pq.top()[0]){
                    sum += - pq.top()[0] + arr[i][0];
                    pq.pop();
                    pq.push(arr[i]);
                    
                    
                }
            }

            
            performance = max(performance, sum*arr[i][1]);
            i++;
        }

        return performance % 1'000'000'007;
    }
};
