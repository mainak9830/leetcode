class Solution:
  
    def beautifulSubsets(self, nums: List[int], k: int) -> int:
        d = defaultdict(lambda : defaultdict(int))
        for num in nums:
            d[num % k][num] += 1
        
        total = 1
        for dict_group in d.values():
            s = sorted(dict_group.items())
            # count.remove()
            # self.count = [-1] * len(s)
            self.count = defaultdict(int)
            total *= self.rec(s, 0, k)
        return total - 1
    
    def rec(self, subsets: List[List[int]], i: int, k:int):
        n = len(subsets)
        if i == n:
            return 1
        if i in self.count:
            return self.count[i]
        take = (1 << subsets[i][1]) - 1

        skip = 1 * self.rec(subsets, i+1, k)

        if i+1 < n and subsets[i+1][0] - subsets[i][0] == k:
            take *= self.rec(subsets, i+2, k)
        else:
            take *= self.rec(subsets, i+1, k)
        self.count[i] = skip + take
        return self.count[i]
        
