/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    long long kthLargestLevelSum(TreeNode* root, int k) {
        priority_queue<long long, vector<long long>, greater<long long>> pq;
        queue<TreeNode*> queue;
        queue.push(root);
        while(queue.size()){
            int size = queue.size();
            long long level = 0;
            for(int i = 0;i < size;i++){
                TreeNode* node = queue.front();
                queue.pop();
                level += node->val;

                if(node->left)queue.push(node->left);
                if(node->right)queue.push(node->right);
            }
            if(pq.size() < k)pq.push(level);
            else{
                if(pq.top() < level){
                    pq.pop();
                    pq.push(level);
                }
            }

        }

        return pq.size() < k ? -1 : pq.top();

    }
};
