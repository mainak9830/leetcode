/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int, int> depth;
    map<int, vector<int>> nodes;
    map<int, int> height;
    int dfs(TreeNode* root, int d){
        if(!root)return 0;
        // height[d].push_back(root->val);
        height[root->val] = d;
        
        depth[root->val] = 1 + max(dfs(root->left, d+1), dfs(root->right, d+1));
        if(nodes.count(d) == 0){
            // cout << "error" << endl;
            nodes[d] = {0,0};
        }
        int h = depth[root->val];
        if(nodes[d][0] <= h){
            nodes[d][1] = nodes[d][0];
            nodes[d][0] = h;
            
        }else if(nodes[d][1] <= h){
            
            nodes[d][1] = h;
            
        }
        return depth[root->val];
    }
    vector<int> treeQueries(TreeNode* root, vector<int>& queries) {
        int h = dfs(root, 0)-1;
        vector<int> ans;
        // for(int node : nodes[h]){
            
        //     // 
        // }
        for(int query : queries){  
            // cout << "error" << endl;
            // cout << query << " " << height[query] << " " << nodes[height[query]][1] << endl;
            if(h > height[query] - 1 + depth[query])
                ans.push_back(h);
            else
                ans.push_back(height[query] - 1 + nodes[height[query]][1]);
        }

        return ans;
    }
};
