class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        
        int l = 0, h = 0;
        
        int ans = INT_MAX;
        int n = nums.size();
        int sum = 0;
        
        while(h <= n && l <= h){
            
            if(sum < target){
                if(h == n)
                    break;
                sum += nums[h];
                h++;
            }
            else{
                if(l == n)
                    break;
                ans = min(ans, h-l);
                //cout << ans << "\n";
                sum -= nums[l];
                l++;
                    
            }
        }
        
        return ans == INT_MAX ? 0 : ans;
    }
};



//Solution 2


class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        
        int ans = INT_MAX;
        int n = nums.size();
        int sum = 0;
        vector<int> prefix(n);
        
        for(int i = 0;i < n;i++){
            sum += nums[i];
            prefix[i] = sum;
        }
        
        for(int i = 0;i < n;i++){
            
            int len;
            int idx = lower_bound(prefix.begin(), prefix.end(), prefix[i]-target) - prefix.begin();
            if(prefix[idx] == prefix[i]-target)
                len = i - idx;
            else
                len = i-idx+1;
            if(prefix[i] >= target)
                ans = min(ans, len);
        }
        
        
        
        return ans == INT_MAX ? 0 : ans;
    }
};
