/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<TreeNode*, long long int> map;
    long long int maxi = LONG_MIN;
    TreeNode* global;
    int subSum(TreeNode* root){
        if(!root)
            return 0;

        int l = subSum(root->left);
        int r = subSum(root->right);
        map[root] = (1LL)*root->val + l + r;
        return map[root];
        
    }

    void maximumSplit(TreeNode* root){
        if(!root)
            return;
        if(root->left){
            maxi = max(maxi, (map[root->left]*(map[global]-map[root->left])));
            maximumSplit(root->left);
        }
 
        if(root->right){
            maxi = max(maxi, (map[root->right]*(map[global]-map[root->right])));
            maximumSplit(root->right);
        }
    }

    int maxProduct(TreeNode* root) {
        global = root;
        subSum(root);
        maximumSplit(root);
        return maxi % 1000000007;
    }
};
