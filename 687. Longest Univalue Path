/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxLength = 0;
    int dfs(TreeNode* root){
        if(!root)return 0;
        // if(!root->left and !root->right)return 1;

        int lcount = dfs(root->left);
        int rcount = dfs(root->right);
        int l = 0, r = 0;
        if(root->left && root->val == root->left->val)
            l = 1 + lcount;
        if(root->right && root->val == root->right->val)
            r = 1 + rcount;
        maxLength = max({maxLength, 1, l, r, l+r-1});
        return max({1, l, r});
    }
    int longestUnivaluePath(TreeNode* root) {
        if(!root)return 0;
        dfs(root);
        return maxLength - 1;
    }
};
