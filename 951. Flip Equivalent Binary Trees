/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
        vector<int> t1, t2;
        dfs(root1, t1);
        dfs(root2, t2);
        
        if(t1.size() != t2.size())return false;

        for(int i = 0;i < t1.size();i++){
            cout << t1[i] << " " << t2[i] << endl;
            if(t1[i] != t2[i])return false;
        }

        return true;
    }

    void dfs(TreeNode* root, vector<int>& traversal){
        if(root == NULL)
            return;
        
        traversal.push_back(root->val);
        int lval = root->left ? root->left->val : -1;
        int rval = root->right ? root->right->val : -1;

        if(lval < rval){
            dfs(root->left, traversal);
            dfs(root->right, traversal);
        }else{
            dfs(root->right, traversal);
            dfs(root->left, traversal);
        }

        traversal.push_back(-1);
    }
};
