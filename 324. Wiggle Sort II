class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        // 1 1 1 1 4 5
        // 1 5 1 4 1 1
        // 1 1 1 2 3 4
        //  mid-1 > mid < mid+1
        // 1 2 3 4 5 (for odd number, mid is peak)
        // 1 2 3 4 5 6 7
        // 1 2 3 4 5
        // 1 2 2 2 5
        // 1 2 5 2 2 (n+1)/2
        // 1 2 2 4
        // 1 4 2 2

        // 3 way partitioning

        int n = nums.size();

        int mid = n/2;

        // 0 - 1, 1 - 3, 2 - 5, 4 - 9, 5 - 0
        // 1 2 2 4
        // 1 

        // 0 1 2 3 4 5 6
        // 1 2 3 4 5 6 7
        // 1 5 2 6 3 7 4
        // low = till mid
        // 12345 
        // virtual indexing 
        // physically wiggled - virtually 3 way partitioned
        // 0 2 4 6
        // 1 3 5
        nums - 0 1 2 3 4 5 6 7 8 9
               5 0 6 1 7 2 8 3 9 4
        // 0,2,4,6,8 -> less than mid

        // virtual mapping 0, 1, 2, 3
        // real mapping 1, 3, 0, 2
        // 0 1 2 3 4 5 6 7 8 9
        // 4 9 3 8 2 7 1 6 0 5
        
        indexing sorting virtual indexing, this gets automatically partitioned

        
    }
};
