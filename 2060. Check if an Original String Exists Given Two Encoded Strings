class Solution {
public:
    vector<vector<vector<int>>> dp;
    bool dfs(string &s1, string &s2, int i, int j, int diff){
        int n1 = s1.length();
        int n2 = s2.length();
        
        
        if(i >= n1 && j >= n2 && diff == 0)return true;
        if(dp[i][j][1000+diff] != -1)
            return dp[i][j][1000+diff];
        //Both characters and equal and no wildcart
        if(i < n1 && j < n2 && diff == 0 && s1[i] == s2[j] && dfs(s1,s2,i+1,j+1,0)){
            return dp[i][j][diff+1000] = true;
            
        }
        if(i < n1 && isalpha(s1[i]) && diff < 0 && dfs(s1,s2,i+1,j,diff+1)){
            return dp[i][j][diff+1000] = true;
            
        }
        if(j < n2 && isalpha(s2[j]) && diff > 0 && dfs(s1,s2,i,j+1,diff-1)){
            return dp[i][j][diff+1000] = true;
        }
        int num = 0;
        for(int k = i;k < n1 && isdigit(s1[k]);k++){
            num = num*10 + s1[k]-'0';
            if(dfs(s1,s2,k+1,j,diff+num))
                return dp[i][j][diff+1000] = true;
        }
        num = 0;
        for(int k = j;k < n2 && isdigit(s2[k]);k++){
            num = num*10 + s2[k]-'0';
            if(dfs(s1,s2,i,k+1,diff-num))
                return dp[i][j][diff+1000] = true;
        }
        return dp[i][j][diff+1000] = false;
    }
    bool possiblyEquals(string s1, string s2) {
        dp.resize(41, vector<vector<int>>(41, vector<int>(2000,-1)));
        
        return dfs(s1,s2,0,0,0);
    }
};
