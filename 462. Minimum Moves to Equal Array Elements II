class Solution {
public:
    void swap(vector<int>& nums, int i, int j){
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }
    int partition(vector<int>& list, int left ,int right){
        int pivotValue = list[right];
        int i = left;
        for (int j = left; j <= right; j++) {
            if (list[j] < pivotValue) {
                swap(list, i, j);
                i++;
            }
        }
        swap(list, right, i);
        return i;
    }
    int median(vector<int>& nums, int l, int h, int k){
        if(l == h)
            return nums[l];
        int p = partition(nums,l,h);
        int len = p-l+1;
        if(len == k)
            return nums[p];
        if(len > k)
            return median(nums, l, p-1, k);
        return median(nums,p+1,h,k-len);
    }
    int minMoves2(vector<int>& nums) {
        int n = nums.size();
        int med = median(nums, 0, n-1,n/2+1);
        int ans = 0;

        for(int i = 0;i < n;i++){
            ans += abs(med-nums[i]);
        }
        return ans;
    }
};
