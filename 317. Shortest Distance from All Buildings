class Solution {
public:
    
    int shortestDistance(vector<vector<int>>& grid) {
        int minDistance = INT_MAX;
        int landValue = 0;
        bool found = false;
        int m = grid.size();
        int n = grid[0].size();
        
        vector<vector<int>> distance(m, vector<int>(n,0));
        int buildings = 0;
        for(int i = 0;i < m;i++){
            for(int j = 0;j < n;j++){
                if(grid[i][j] == 1){
                    

                    int m = grid.size();
                    int n = grid[0].size();
                    minDistance = INT_MAX;
                    found = false;
                    queue<vector<int>> queue;
                    queue.push({i,j});
                    
                    int level = 0;
                    int directions[4][2] = {{0,1},{1,0},{0,-1},{-1,0}};
                    while(!queue.empty()){
                        int len = queue.size();
                        level++;
                        for(int i = 0;i < len;i++){
                            vector<int> xy = queue.front();
                            queue.pop();
                            for(auto& d : directions){
                                int x = xy[0] + d[0];
                                int y = xy[1] + d[1];
                                if(x < 0 || y < 0 || x >= m|| y >= n || grid[x][y] != landValue)
                                    continue;
                                
                                distance[x][y] += level;
                                grid[x][y]--;
                                queue.push({x,y});
                                found= true;
                                minDistance = min(minDistance, distance[x][y]);
                                
                            }

                        }
                        
                    }
                    landValue--;

                   
                }
            }
        }

        return found ? minDistance : -1;
    }
};
