/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        queue<pair<TreeNode*, unsigned long long int>> queue;
        queue.push({root,1});
        int maxWidth = 0;
        
        while(!queue.empty()){
            int len = queue.size();
            int h = 0;
            int idx = queue.front().second;
            for(int i = 1;i <= len;i++){
                TreeNode* node = queue.front().first;
                int curridx = queue.front().second;
                queue.pop();
                h = curridx;
                //cout << (idx-1)*2 << endl;
                if(node->left)
                    queue.push({node->left, (curridx-idx)*2LL+1});
                if(node->right)
                    queue.push({node->right, (curridx-idx)*2LL+2});
            }
            
            maxWidth = max(maxWidth, h-idx+1);
        }
        
        return maxWidth;
    }
};
