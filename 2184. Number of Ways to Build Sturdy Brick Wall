//wasted time just because gave && instead of & as bit wise operation.
class Solution {
public:
    typedef long long int64;
    int H,W;
    int dp[101][1 << 12];
    int MOD = 1e9 + 7;
    vector<int> B;
    int calWays(int w, int h, int prevMask, int mask) {
        
        if(h == H)
            return 1;
        if(dp[h][prevMask] != -1)
            return dp[h][prevMask];
        if(w == W){
            return calWays(0, h+1, mask, 0);
        }
        int ways = 0;
        for(int b : B){

            int nw = w + b;
            int maskt = nw < W ? (mask | (1 << nw)) : mask;
            if(nw > W || ((maskt & prevMask) > 0))
                continue;
            
    
            
            ways = (ways + calWays(nw, h, prevMask, maskt)) % MOD;
            
            
        }

        
        return mask == 0 ? dp[h][prevMask] = ways : ways;
    }
    
    int buildWall(int height, int width, vector<int>& bricks) {
        H = height;
        W = width;
        B = bricks;
        memset(dp, -1, sizeof(dp));
        
        
        return calWays(0,0,0,0);
    }
};
