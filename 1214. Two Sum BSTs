/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, vector<int>& arr){
        if(!root)return;
        dfs(root->left, arr);
        arr.push_back(root->val);
        dfs(root->right, arr);
    }
    bool twoSumBSTs(TreeNode* root1, TreeNode* root2, int target) {
        vector<int> array1;
        vector<int> array2;
        dfs(root1, array1);
        dfs(root2, array2);
        int i = 0, j = 0;
        set<int> map1;

        for(int num : array1){
            map1.insert(num);
        }

        for(int num : array2){
            if(map1.count(target-num))
                return true;
        }
        
        return false;
    }
};
