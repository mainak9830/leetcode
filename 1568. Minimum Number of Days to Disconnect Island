class Solution {
public:
    void dfs(vector<vector<int>>& grid, int i, int j, int seen, int island){
        int m = grid.size();
        int n = grid[0].size();

        if(i < 0 || j < 0 || i >= m || j >= n || grid[i][j] != island)
            return;

        grid[i][j] = seen;
        dfs(grid, i+1, j, seen, island);
        dfs(grid, i, j-1, seen, island);
        dfs(grid, i-1, j, seen, island);
        dfs(grid, i, j+1, seen, island);
    }
    int getIslandCount(vector<vector<int>>& grid, int island, int seen){

        int m = grid.size();
        int n = grid[0].size();

        int count = 0;

        for(int i = 0;i < m;i++){
            for(int j = 0;j < n;j++){
                if(grid[i][j] == island){
                    dfs(grid, i, j, seen, island);
                    count++;
                }
            }
        }
        return count;
    }
    void swap(int& a, int& b){
        int t = a;
        a = b;
        b = t;
    }
    int minDays(vector<vector<int>>& grid) {
        int island = 1;
        int seen = 2;
        int count = getIslandCount(grid, island, seen);
        swap(island, seen);
        // cout << island << " " << seen << endl;
        if(count != 1)return 0;

        int m = grid.size();
        int n = grid[0].size();

        for(int i = 0;i < m;i++){
            for(int j = 0;j < n;j++){
                if(grid[i][j] == island){
                    grid[i][j] = 0;
                    
                    if(getIslandCount(grid, island, seen) != 1)return 1;
                    grid[i][j] = seen;
                    swap(island, seen);

                }
            }
        }
        // count == 1

        return 2;
    }
};
