class Solution {
public:
    string getStart(string s){
        if(s[0] == 'a')
            return s;
        int k = 26 + 'a' - s[0];
        for(int i = 0;i < s.length();i++){
            int shift = (s[i] + k - 'a') % 26;
            s[i] = 'a' + shift;
        }
            
        
        return s;
        
    }
    vector<vector<string>> groupStrings(vector<string>& strings) {
        
        int n = strings.size();
        vector<vector<string>> ans;
        map<string, vector<string>> map;
        for(int i = 0;i < n;i++){
            string s = strings[i];
            string startString = getStart(s);
            if(map.count(startString) == 0){
                map[startString] = {};
            }
            map[startString].push_back(s);
        }
        
        for(auto item : map){
            cout << item.first << endl;
            ans.push_back(item.second);
        }
        return ans;
    }
};
