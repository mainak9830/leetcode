/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = preorder.size();
        return build(preorder, inorder, 0, n-1,0,n-1);
    }
    
    TreeNode* build(vector<int>& preorder, vector<int>& inorder, int pl, int ph, int inl, int inh){
        if(pl > ph || inl > inh)
            return NULL;
        int i;
        for(i = inl;i <= inh;i++){
            if(inorder[i] == preorder[pl])
                break;
        }
        
        TreeNode* node = new TreeNode(preorder[pl]);
        
        node->left = build(preorder, inorder, pl+1, pl+i-inl, inl, i-1);
        node->right = build(preorder, inorder, ph+i-inh+1, ph,i+1,inh);
        
        return node;
    }
};
