class DSU{

public:
    int *parent;
    int n;
    DSU(int n){
        this->n = n;
        parent = new int[n];
        for(int i = 0;i < n;i++)
            parent[i] = i;
        
    }

    int Union(int u, int v){
        if(find(u) == find(v))return -1;

        parent[find(v)] = find(u);

        return 1;        
    }

    int find(int u){
        if(parent[u] == u)
            return u;

        parent[u] = find(parent[u]);
        return parent[u];
    }
    int countComponents(){
        set<int> p;
        for(int i = 0;i < n;i++){
            p.insert(find(i));
        }

        return p.size();
    }
};
class Solution {
public:
    
    int makeConnected(int n, vector<vector<int>>& connections) {
        
        DSU dsu(n);
        int extraCables = 0;
        for(auto con : connections){
            if(dsu.Union(con[0], con[1]) == -1)
                extraCables++;
            
        }

        int components = dsu.countComponents();
        //cout << components << endl;
        if(components > extraCables+1)
            return -1;

        return components-1;
        

    }
};
