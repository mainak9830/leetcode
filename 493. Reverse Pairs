class Solution {
public:
    int merge(vector<int>& nums, int l,int mid, int h){
        
        int i = l;
        int j = mid;
        int k = l;
        int count = 0;
        vector<int> temp;
        int n = mid;
        for(int m=l;m <= mid-1;m++){
            while(n <= h && nums[m] > 2*long(nums[n]))
                n++;
            count += n-mid;
        }
        while(i <= mid-1 && j <= h){
            if(nums[i] <= nums[j]){
                temp.push_back(nums[i++]);
            }else if(nums[i] > nums[j]){
                temp.push_back(nums[j++]);
            }
        }
        while(i <= mid-1)
            temp.push_back(nums[i++]);
        while(j <= h)
            temp.push_back(nums[j++]);
        
        k = l;
        while(k <= h){
            nums[k] = temp[k-l];
            k++;
        }
        
        return count;
    }
    int mergeCount(vector<int>& nums, int l, int h){
        if(l >= h)
            return 0;
        int count = 0;
        int mid = l + (h-l)/2;
        count += mergeCount(nums, l, mid);
        count += mergeCount(nums, mid+1, h);
        count += merge(nums,l,mid+1,h);
        return count;
    }
    int reversePairs(vector<int>& nums) {
        
        return mergeCount(nums,0,nums.size()-1);
        
    }
};
