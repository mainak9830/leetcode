/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(!root)
            return root;
        Node* head = root;
        while(head){
            Node* curr = head;
            Node* nextLevelleft = NULL;
            Node* sameLevelprev = NULL;
            while(curr){
                
                if(curr->left){
                    if(sameLevelprev == NULL){
                        sameLevelprev = curr->left;
                        nextLevelleft = curr->left;
                    }
                    else{
                        sameLevelprev->next = curr->left;
                        sameLevelprev = curr->left;
                    }

                }
                if(curr->right){
                    if(sameLevelprev == NULL){
                        sameLevelprev = curr->right;
                        nextLevelleft = curr->right;
                    }
                    else{
                        sameLevelprev->next = curr->right;
                        sameLevelprev = curr->right;
                    }

                }
                curr = curr->next;
            }
            head = nextLevelleft;

        }
        return root;
    }
};
