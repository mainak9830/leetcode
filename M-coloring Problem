// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
//Function to determine if graph can be coloured with at most M colours such
//that no two adjacent vertices of graph are coloured with same colour.
int colors[20];
bool validColor(bool graph[101][101], int v, int c, int n){
    
    for(int i=0;i < n;i++){
        
        if(i != v && graph[v][i] && colors[i] == c)
            return false;
    }
    
    return true;
}
bool color(bool graph[101][101], int v, int m, int n){
    
    if(v == n){
        return true;
    }
    
    for(int c=0;c < m;c++){
        if(validColor(graph, v, c, n)){
            colors[v] = c;
            //cout << v+1 << " " << c+1 << endl;
            if(color(graph,v+1,m,n))
                return true;
            colors[v] = -1;
        }
    }
    return false;
}
bool graphColoring(bool graph[101][101], int m, int n)
{
    // your code here
    memset(colors, -1, sizeof(colors));
    return color(graph, 0, m, n);
}

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m, e;
        cin >> n >> m >> e;
        int i;
        bool graph[101][101];
        for (i = 0; i < n; i++) {
            memset(graph[i], 0, sizeof(graph[i]));
        }
        for (i = 0; i < e; i++) {
            int a, b;
            cin >> a >> b;
            graph[a - 1][b - 1] = 1;
            graph[b - 1][a - 1] = 1;
        }
        cout << graphColoring(graph, m, n) << endl;
    }
    return 0;
}
  // } Driver Code Ends
