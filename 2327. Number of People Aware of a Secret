class Solution {
public:
    int peopleAwareOfSecret(int n, int delay, int forget) {
        queue<vector<int>> queue, tqueue;
        queue.push({1+forget,1+delay,1});
        int MOD = 1000000007;
        for(int day = 2;day <= n;day++){
            while(!queue.empty() && queue.front()[0] <= day)
                queue.pop();
            tqueue = queue;
            long long int count = 0;
            while(!tqueue.empty() && tqueue.front()[1] <= day){
                count = (count + tqueue.front()[2])%MOD;
                tqueue.pop();
            }
            //cout << count << " ";
            if(count > 0)
                queue.push({day+forget, day+delay, (int)count});
            //cout << queue.size() << " ";

        }
        int len = 0;
        while(!queue.empty()){
            len = (len + queue.front()[2])%MOD; 
            queue.pop();
        }
        return len;
    }
};


class Solution {
public:
    vector<int> dp;
    int MOD = 1000000007;
    int count(int i, int delay, int forget) {
        //ith day --- i-delay
        // 1 2 3 4 5 6
        // 1 0 1 1 0 2
        if(i == 1)
            return 1;
        if(i <= 0)
            return 0;
        if(dp[i] != -1)
            return dp[i];
        int cnt = 0;
        for(int day = delay;day < forget;day++){
            cnt = (cnt + count(i-day, delay, forget))%MOD;
        }
        dp[i] = cnt;

        return cnt;
    }
    int peopleAwareOfSecret(int n, int delay, int forget) {
        dp.resize(n+1,-1);
        
        int ans = 0;
        for(int i = n-forget+1;i <= n;i++){
            ans = (ans + count(i, delay, forget))%MOD;
        }
        return ans;
    }
};
