class Solution {
public:
    
    int jump(vector<int>& arr, int i, int d, vector<int>& dp){
        int n = arr.size();
        if(dp[i] != -1){
            //cout << "cahced" << endl;
            return dp[i];
        }
        //cout << "( " << i << " | " << seen.size() << ")-->";
        int ans = 0;
        for(int k = 1;k <= d;k++){
            if(i + k >= n || arr[i+k] >= arr[i])break;
            ans = max(ans, jump(arr, i+k, d, dp));
        }
        for(int k = 1;k <= d;k++){
            if(i - k < 0 || arr[i-k] >= arr[i])break;
            ans = max(ans, jump(arr, i-k, d, dp));
        }
        dp[i] = ans + 1;
        return dp[i];
    }
    int maxJumps(vector<int>& arr, int d) {
        int n = arr.size();
        int ans = 0;
        vector<int> dp(n,-1);
        for(int i = 0;i < n;i++){
            ans = max(ans, jump(arr, i, d, dp));
            //cout << endl;
        }
        return ans;
    }
};
