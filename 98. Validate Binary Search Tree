//Approach 1      ::::::::::::::::::::::::

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool helper(TreeNode* root, long min, long max){
        if(root == NULL)
            return true;
        if(root->val <= min || root->val >= max)
            return false;
        return helper(root->left,min,root->val) && helper(root->right,root->val,max);
    }
    bool isValidBST(TreeNode* root) {
        return helper(root,LONG_MIN, LONG_MAX);
        
    }
};

//Approach 2 ::::::::::::::::::::::::::

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool helper(TreeNode* root, TreeNode* &prev){
        if(root == NULL)
            return true;
        
        // if(prev != NULL && root->val <= prev->val)
        //     return false;
        
        if(!helper(root->left,prev)){
            return false;
        }
        
        if(prev != NULL && root->val <= prev->val)
            return false;
        
        prev = root;
        // cout << prev->val << endl;
        if(!helper(root->right,prev))
            return false;
        
        
        return true;
        
        
    }
    
    bool isValidBST(TreeNode* root) {
        TreeNode* prev = NULL;
        return helper(root,prev);
    }
};
