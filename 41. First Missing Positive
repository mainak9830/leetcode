class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();
        for(int i = 0;i < n;i++){
            if((nums[i] > n) || (nums[i] <= 0))
                nums[i] = n+1;
        }
        
        for(int i = 0;i < n;i++){
            if(abs(nums[i]) > n)
                continue;
            int idx = abs(nums[i])-1;
            nums[idx] = abs(nums[idx])*-1;
        }
        
        
        
        for(int i = 0;i < n;i++){
            if(nums[i] > 0)
                return i+1;
        }
        
        return n+1;
        
    }
};

//Changing Order
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();
        
        int i = 0;
        
        while(i < n){
            if(nums[i] >= 1 && nums[i] <= n && nums[i] != nums[nums[i]-1])
                swap(nums[i],nums[nums[i]-1]);
            else
                i++;
                
        }
        
        for(int i = 0;i < n;i++){
            if(nums[i] != i+1)
                return i+1;
        }
        
        return n+1;
        
    }
};
