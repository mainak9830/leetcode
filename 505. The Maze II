class Solution {
public:
    int shortestDistance(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {
        int m = maze.size();
        int n = maze[0].size();
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0, start[0], start[1]});
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        vector<int> dx = {0, 0, 1, -1};
        vector<int> dy = {1, -1, 0, 0};
        while(!pq.empty()){
            auto node = pq.top();
            pq.pop();
            int x = node[1];
            int y = node[2];
            if(visited[x][y])continue;
            if(x == destination[0] && y == destination[1])return node[0];
            visited[x][y] = true;
            for(int i = 0;i < 4;i++){
                int x1 = x;
                int y1 = y;
                
                while(x1 >= 0 && x1 < m && y1 >= 0 && y1 < n && maze[x1][y1] == 0){
                    x1 = x1 + dx[i];
                    y1 = y1 + dy[i];
                }

                x1 = x1 - dx[i];
                y1 = y1 - dy[i];
                if(!visited[x1][y1]){
                    pq.push({node[0] + abs(x1-x)+abs(y1-y), x1, y1});
                }
            }
        }
        return -1; 
    }
};
