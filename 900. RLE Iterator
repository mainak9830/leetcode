//BruteForce
class RLEIterator {
public:
    vector<int> encoded;
    int len;
    long long int track = 0;
    int idx = 0;
    long long int gn=0;
    RLEIterator(vector<int>& encoding) {
        encoded = encoding;
        len = encoding.size();
    }
    
    int next(int n) {
        gn += n;
        while(idx < len){
            if(track + encoded[idx] < gn){
                track += encoded[idx];
                idx += 2;
            }
            else{
                return encoded[idx+1];
            }
            
        }
        
        return -1;
        
    }
};

/**
 * Your RLEIterator object will be instantiated and called as such:
 * RLEIterator* obj = new RLEIterator(encoding);
 * int param_1 = obj->next(n);
 */


class RLEIterator {
public:
    vector<int> encoded;
    int len;
    long track = 0;
    int idx = 0;
    vector<long> freqPrefix;
    RLEIterator(vector<int>& encoding) {
        encoded = encoding;
        len = encoding.size();
        long c = 0;
        for(int i = 0;i < len;i += 2){
            c += encoded[i];
            freqPrefix.push_back(c);
            //cout << c << endl;
        }
    }
    
    int next(int n) {
        track += n;
        if(track > freqPrefix[len/2-1])
            return -1;
        auto it = lower_bound(freqPrefix.begin()+idx, freqPrefix.end(), track);
        idx = it-freqPrefix.begin();
        //cout << idx << endl;

        return encoded[idx*2+1];
        
    }
};

/**
 * Your RLEIterator object will be instantiated and called as such:
 * RLEIterator* obj = new RLEIterator(encoding);
 * int param_1 = obj->next(n);
 */
