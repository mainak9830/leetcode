/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& desc) {
        
        int n = desc.size();
        map<int, TreeNode*> nodes;
        for(int i=0;i < n;i++){
            int child = desc[i][1];
            int parent = desc[i][0];
            
            nodes[child] = new TreeNode(child);
        }
        TreeNode *root;
        for(int i=0;i < n;i++){
            int child = desc[i][1];
            int parent = desc[i][0];
            
            if(!nodes.count(parent)){
                root = new TreeNode(parent);
                nodes[parent] = root;
            }
            if(desc[i][2] == 1){
                nodes[parent]->left = nodes[child];
            }else{
                nodes[parent]->right = nodes[child];
            }
        }
        
        
        return root;
    }
};
