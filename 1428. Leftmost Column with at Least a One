/**
 * // This is the BinaryMatrix's API interface.
 * // You should not implement it, or speculate about its implementation
 * class BinaryMatrix {
 *   public:
 *     int get(int row, int col);
 *     vector<int> dimensions();
 * };
 */

class Solution {
public:
    int leftMostColumnWithOne(BinaryMatrix &binaryMatrix) {
        vector<int> dimensions = binaryMatrix.dimensions();
        int m = dimensions[0];
        int n = dimensions[1];

        
        int minl = n;
        for(int r = 0;r < m;r++){
            int l = 0;
            int h = n-1;
            while(l <= h){
                int mid = l + (h-l)/2;
                if(binaryMatrix.get(r,mid) == 1){
                    h = mid-1;
                }else{
                    l = mid+1;
                }
            }
            minl = min(minl,l);
        }
        

        return minl == n ? -1 : minl;
    }
};

/**
 * // This is the BinaryMatrix's API interface.
 * // You should not implement it, or speculate about its implementation
 * class BinaryMatrix {
 *   public:
 *     int get(int row, int col);
 *     vector<int> dimensions();
 * };
 */

class Solution {
public:
    int leftMostColumnWithOne(BinaryMatrix &binaryMatrix) {
        vector<int> dimensions = binaryMatrix.dimensions();
        int m = dimensions[0];
        int n = dimensions[1];
        int row = 0;
        int col = n-1;

        while(row < m && col >= 0){
            if(binaryMatrix.get(row,col) == 0)
                row++;
            else
                col--;
        }

        return (col == n-1) ? -1 : col+1;
        
        
    }
};
