/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // map<int, vector<TreeNode*>> dp;
    vector<TreeNode* > find(int n){
        if(n%2 == 0)
            return {};
        
        if(n == 1)
            return {new TreeNode(0)};
        vector<TreeNode*> roots;
        
        for(int i = 1;i < n;i++){
            vector<TreeNode*> leftNodes = find(i);
            vector<TreeNode*> rightNodes = find(n-i-1);
            // if((leftNodes.size() == 0) && (rightNodes.size() == 0)){
            //     roots.push_back(new TreeNode(0));
            // }
            if((leftNodes.size() == 0) || (rightNodes.size() == 0))
                continue;
            for(auto left : leftNodes){
                for(auto right : rightNodes){
                    TreeNode* root = new TreeNode(0);
                    root->left = left;
                    root->right = right;
                    roots.push_back(root);
                }
            }
            
        }
        
        
        
        return roots;
    }
    vector<TreeNode*> allPossibleFBT(int n) {
        
        return find(n);
    }
};
