class Solution {
public:
    bool checkForOddCycles(int u, vector<int>& color, vector<vector<int>>& graph, int nodeColor){
        if(color[u] != -1){
            if(color[u] != nodeColor)return true;
            return false;
        }
        color[u] = nodeColor;
        for(int v : graph[u]){

            if(checkForOddCycles(v, color, graph, (nodeColor+1)%2))return true;
                
        }
        return false;
    }
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
        vector<vector<int>> graph(n+1, vector<int>());

        for(vector<int> edge : dislikes){
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }

        vector<int> color(n+1, -1);
        for(int i = 1;i <= n;i++){
            if(color[i] == -1 && checkForOddCycles(i, color, graph, 0))return false;
        }
        return true;
    }
};
