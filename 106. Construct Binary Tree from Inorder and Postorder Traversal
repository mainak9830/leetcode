/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* build(vector<int>& inorder, vector<int>& postorder, int inl, int inh, int postl, int posth){
        if(inl > inh || postl > posth)
            return NULL;
        int i = inl;
        for(i = inl;i <= inh;i++){
            if(inorder[i] == postorder[posth])
                break;
        }
        int llen = i - inl;
        int rlen = inh - i;
        TreeNode* root = new TreeNode(postorder[posth]);
        root->left = build(inorder, postorder,inl,i-1,postl, postl+llen-1);
        root->right = build(inorder, postorder,i+1,inh,posth-rlen, posth-1);

        return root;

    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = inorder.size();
        return build(inorder, postorder,0,n-1,0,n-1);
    }
};
