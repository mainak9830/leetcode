/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* predecessor(TreeNode* root){

        while(root->right){
            root = root->right;
        }
        return root;
    }
    TreeNode* successor(TreeNode* root){

        while(root->left){
            root = root->left;
        }
        return root;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root)
            return root;
        

        if(key == root->val){
            if(!root->left && !root->right)
                return NULL;
            else if(root->left){
                TreeNode* node = predecessor(root->left);
                root->val = node->val;
                root->left = deleteNode(root->left, root->val);
            }else if(root->right){
                TreeNode* node = successor(root->right);
                root->val = node->val;
                root->right = deleteNode(root->right, root->val);
            }
        }
        else if(key < root->val)
            root->left = deleteNode(root->left, key);
        else
            root->right = deleteNode(root->right, key);
        return root;
    }
};
