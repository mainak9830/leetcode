class Solution {
public:
    typedef pair<double, int> pa;
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        
        priority_queue<pa> pq;
        vector<pa> *neighbors = new vector<pa> [n+1];

        for(int i = 0;i < edges.size();i++){
            neighbors[edges[i][0]].push_back({succProb[i], edges[i][1]});
            neighbors[edges[i][1]].push_back({succProb[i], edges[i][0]});
        }
        
        vector<bool> visited(n+1,false);  
        pq.push({1, start});
        while(!pq.empty()){
            pa topEl = pq.top();
            double costU = topEl.first;
            int u = topEl.second;

            // cout << u << endl;
            pq.pop();
            if(u == end)
                return costU;
            if(visited[u])
                continue;
            
            visited[u] = true;
            
            
            
            for(auto v : neighbors[u]){
                if(!visited[v.second]){

                    pq.push({costU*v.first, v.second});
                }
            }
        }

        return 0.0;
    }
};
