class Solution {
public:
    
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size() > nums2.size())
            return findMedianSortedArrays(nums2, nums1);
        int n = nums1.size();
        int m = nums2.size();
        int low = 0;
        int high = n;
        int median = (n+m+1)/2;
        
        while(low <= high){
            
            int p1 = low + (high-low)/2;
            int p2 = median - p1;
            
            int l1 = (p1 == 0) ? INT_MIN : nums1[p1-1];
            int l2 = (p2 == 0) ? INT_MIN : nums2[p2-1];
            int r1 = (p1 == n) ? INT_MAX : nums1[p1];
            int r2 = (p2 == m) ? INT_MAX : nums2[p2];
            
            if(l1 <= r2 && l2 <= r1){
                if((n+m)%2)
                    return max(l1,l2);
                else
                    return (max(l1,l2) + min(r1,r2))/2.0;
                    
            }
            else if(l1 <= r2){
                low = p1 + 1;
            }else
                high = p1 - 1;
        }
        return 0.00;
    }
};
