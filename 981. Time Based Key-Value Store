
//TLE solution
class TimeMap {
public:
    unordered_map<string, map<int, string>> store;
    TimeMap() {
        
    }
    
    void set(string key, string value, int timestamp) {
        store[key][timestamp] = value;

    }
    
    string get(string key, int timestamp) {
        int time = -1;
        string ans = "";
        for(auto it : store[key]){
            if(it.first <= timestamp && it.first > time){
                time = it.first;
                ans = it.second;
            }
        }
        return ans;
    }
};

/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap* obj = new TimeMap();
 * obj->set(key,value,timestamp);
 * string param_2 = obj->get(key,timestamp);
 */
 
 class TimeMap {
public:
    unordered_map<string, map<int, string>> store;
    TimeMap() {
        
    }
    
    void set(string key, string value, int timestamp) {
        store[key][timestamp] = value;

    }
    
    string get(string key, int timestamp) {
        
        auto it = store[key].upper_bound(timestamp);

        if(it == store[key].begin())
            return "";
        return prev(it)->second;
    }
};

/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap* obj = new TimeMap();
 * obj->set(key,value,timestamp);
 * string param_2 = obj->get(key,timestamp);
 */
