class Solution {
public:
    bool check(int x, int y, int m, int n){
        if(x < 0 || y < 0 || x >= m || y >= n)
            return false;
        return true;
    }
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        
        int m = grid.size();
        int n = grid[0].size();
        int minPath = 0;
        if(grid[0][0] != 0)
            return -1;
        queue<pair<int,int>> queue;
        queue.push({0,0});
        grid[0][0] = 2;
        int depth = 1;
        vector<int> directions[8] = {{1,0}, {0,1}, {-1,0}, {0,-1}, {1,1}, {-1,-1}, {1,-1}, {-1,1}};
        while(!queue.empty()){
            int len = queue.size();
            
            
            
            for(int j = 1;j <= len;j++){
                //cout << len << endl;
                int xi = queue.front().first;
                int yi = queue.front().second;
                
                if((xi == m-1) && (yi == n-1)){
                     return depth;
                }
                queue.pop();
                for(int i = 0;i < 8;i++){
                    int dx = directions[i][0];
                    int dy = directions[i][1];
                    if(check(xi+dx,yi+dy,m,n) && grid[xi+dx][yi+dy] == 0){
                        
                        
                        queue.push({xi+dx,yi+dy});
                        grid[xi+dx][yi+dy] = 2;
                        
                    }
                    
                }
                
            }
            
            depth++;
            
        }
        
        return -1;
    }
};
