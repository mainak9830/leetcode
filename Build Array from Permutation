//Process 1

class Solution {
public:
    int dfs(vector<int>& nums,vector<int>& visited, int current){
        if(visited[current]){
            return nums[current];
        }
        
        visited[current] = 1;
        int ret = nums[current];
        nums[current] = dfs(nums, visited,nums[current]);
        
        return ret;
        
    }
    vector<int> buildArray(vector<int>& nums) {
        
        vector<int> visited(nums.size(),0);
        for(int i=0;i < nums.size();i++){
            if(!visited[i])
                dfs(nums,visited,i);
        }
        
        return nums;
        
    }
};


//Process 2 optimized O(1)

class Solution {
public:
    
    vector<int> buildArray(vector<int>& nums) {
        
        int n = nums.size();
        
        for(int i=0;i < n;i++){
            nums[i] = n*(nums[nums[i]]%n) + nums[i];
        }
        
        for(int i=0;i < n;i++){
            nums[i] /= n;
        }
        
        return nums;
        
    }
};
