//Greedy approach
class Solution {
public:
    bool static mycomp(vector<int> p1, vector<int> p2){
        
        
            
        return p1[1] < p2[1];
    }
    int findLongestChain(vector<vector<int>>& pairs) {
        int n = pairs.size();
        sort(pairs.begin(),pairs.end(),mycomp);
        int end = pairs[0][1];
        int i = 1;
        int len = 1;
        while(i < n){
            if(pairs[i][0] > end){
                end = pairs[i][1];
                len++;
            }
            i++;
        }
        return len;
    }
};
// DP solution
class Solution {
public:
    bool static mycomp(vector<int> p1, vector<int> p2){    
        return p1[1] < p2[1];
    }
    int findLongestChain(vector<vector<int>>& pairs) {
        int n = pairs.size();
        sort(pairs.begin(),pairs.end());
        vector<int> dp(n,1);
        int ans = 1;
        for(int i=1;i < n;i++){
            int maxi = 0;
            for(int j=i-1;j >= 0;j--){
                if(pairs[j][1] < pairs[i][0])
                    maxi = max(maxi, dp[j]);
            }
            dp[i] = 1 + maxi;
            ans = max(ans, dp[i]);
        }
        return ans;
    }
};
