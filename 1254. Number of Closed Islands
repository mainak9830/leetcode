class Solution {
public:
    vector<vector<int>> G;
    void dfs(int x, int y){
        int m = G.size();
        int n = G[0].size();

        if(x < 0 || y < 0 || x >= m || y >= n || G[x][y] != 0)
            return;
        G[x][y] = 2;

        dfs(x+1,y);
        dfs(x,y-1);
        dfs(x-1,y);
        dfs(x,y+1);
    }
    int closedIsland(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        G = grid;
        for(int i = 0;i < m;i++){
            if(G[i][0] == 0)
                dfs(i,0);
            if(G[i][n-1] == 0)
                dfs(i,n-1);
        }
        for(int j = 0;j < n;j++){
            if(G[0][j] == 0)
                dfs(0,j);
            if(G[m-1][j] == 0)
                dfs(m-1,j);
        }
        int cnt = 0;
        for(int i = 0;i < m;i++){
            for(int j = 0;j < n;j++){
                if(G[i][j] == 0){
                    dfs(i,j);
                    cnt++;
                }
            }
        }
        return cnt;
    }
};
