struct Node{
    Node *childs[26];
    bool end = false;
};
class Trie {
private:
    Node *root;
public:
    
    Trie() {
        root = new Node();
        
    }
    
    void insert(string word) {
        int n = word.size();
        Node *node = root;
        for(int i = 0;i < n;i++){
            int ind = word[i]-'a';
            
            if(node->childs[ind] == NULL)
                node->childs[ind] = new Node();
                
            node = node->childs[ind];
               
        }
        node->end = true;
        
        
    }
    
    bool search(string word) {
        int n = word.size();
        Node *node = root;
        for(int i = 0;i < n;i++){
            int ind = word[i]-'a';
            if(node->childs[ind] != NULL)
                node = node->childs[ind];
            else
                return false;
            
        }
        
        return node->end;
    }
    
    bool startsWith(string prefix) {
        Node *node = root;
        int n = prefix.size();
        for(int i = 0;i < n;i++){
            int ind = prefix[i]-'a';
            if(node->childs[ind] != NULL)
                node = node->childs[ind];
            else
                return false;
        }
        
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
