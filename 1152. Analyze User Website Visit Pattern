class Solution {
public:
    bool static comparator(pair<string, int> p1, pair<string, int> p2){
        if(p1.second <= p2.second)
            return true;
        return false;
    }
    vector<string> mostVisitedPattern(vector<string>& username, vector<int>& timestamp, vector<string>& website) {
        
        int n = username.size();
        map<string, vector<pair<string, int>>> userWebsites;
        for(int i = 0;i < n;i++){
            //if(userWebsites.count(username[i]) == 0)
                //userWebsites[username[i]] = {};
            
            userWebsites[username[i]].push_back({website[i], timestamp[i]});
        }
        map<string, int> websiteCount;
        for(auto user : userWebsites){
            unordered_set<string> sites;
            sort(user.second.begin(), user.second.end(), comparator);
            int n = user.second.size();
            for(int i = 0;i < n;i++){
                for(int j = i+1;j < n;j++){ 
                    for(int k = j+1;k < n;k++){
                        sites.insert(user.second[i].first + "*" + user.second[j].first + "$" + user.second[k].first);
                    }
                }
            }
            
            for(auto item : sites)
                websiteCount[item]++;
        }
        int maxSiteCount = 0;
        string ans = "";
        for(auto item : websiteCount){
            //cout << item.first << " " << item.second << "\n";
            if(item.second >= maxSiteCount){
                if(item.second == maxSiteCount)
                    ans = min(ans, item.first);
                else
                    ans = item.first;
                maxSiteCount = item.second;
            }
        }
        
        auto seperator1 = ans.find("*");
        auto seperator2 = ans.find("$");
    
        return {ans.substr(0,seperator1),
               ans.substr(seperator1+1, seperator2-seperator1-1),
               ans.substr(seperator2+1)};
    }
};
