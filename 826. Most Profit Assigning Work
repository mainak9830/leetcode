class Solution {
public:
    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) {
        vector<pair<int, int>> dp;
        int n = difficulty.size();
        int m = worker.size();

        
        for(int i = 0;i < n;i++){
            dp.push_back({difficulty[i], profit[i]});
        }  
        sort(dp.begin(), dp.end());
        vector<int> maxDp;
        int maximum = 0;
        for(int i = 0;i < n;i++){
            maximum = max(maximum, dp[i].second);
            maxDp.push_back(maximum);
        }

        int ans = 0;
        for(int w : worker){
            int index = upper_bound(dp.begin(), dp.end(), pair<int, int>(w, INT_MAX)) - dp.begin();

            if(index == n)
                index = index - 1;
            else if(index < n && dp[index].first > w)
                index = index - 1;
            if(index >= 0)
                ans += maxDp[index];
        }
        return ans;
    }
};
