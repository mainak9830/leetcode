//TLE 2^n solution

class Solution {
public:
    int LIS(vector<int> nums, int idx, int prev){
        int n = nums.size();
        if(idx == n)
            return 0;
        
        int len1,len2;
        if(idx == 0 || idx > 0 && nums[idx] > prev)
            len1 = 1 + LIS(nums, idx+1, nums[idx]);
        len2 = LIS(nums,idx+1,prev);
        return max(len1, len2);
        
    }
    int lengthOfLIS(vector<int>& nums) {
        
        return LIS(nums,0,INT_MIN);
        
    }
};

// O(n^2) solution dp
//Accepted

class Solution {
public:
    int lengthOfLIS(vector<int>& arr) {
        int n = arr.size();
        vector<int> sum(n,1);
        int ans = sum[0];
        for(int i=1;i < n;i++){
            int len = 0;
            for(int j = i-1;j >= 0;j--){
                if(arr[j] < arr[i])
                    len = max(len, sum[j]);
            }
            sum[i] = 1 + len;
            ans = max(ans,sum[i]);
        }
       return ans; 
    }
};
