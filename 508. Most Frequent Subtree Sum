/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int, int> sum_map;

    int dfs(TreeNode* root){
        if(!root)return 0;

        int subtreeSum = root->val + dfs(root->left) + dfs(root->right);
        sum_map[subtreeSum]++;

        return subtreeSum;
    }
    vector<int> findFrequentTreeSum(TreeNode* root) {
        dfs(root);

        int highest_freq = 0;
        for(auto kv : sum_map){
            highest_freq = max(highest_freq, kv.second);
        }

        vector<int> result;

        for(auto kv : sum_map){
            if(kv.second == highest_freq)
                result.push_back(kv.first);
        }

        return result;
    }
};
