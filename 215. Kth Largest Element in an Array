//Heap solution O(nlog(k))
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int n = nums.size();
        int i = 0;
        //min heap greater<int> 1 2 3 4 5
        priority_queue<int, vector<int>, greater<int>> pq;
        for(i = 0;i < k;i++)
            pq.push(nums[i]);
        
        while(i < n){
            if(nums[i] > pq.top()){
                pq.pop();
                pq.push(nums[i]);
            }
            i++;
        }
        
        return pq.top();
    }
};

//QuickSelect

class Solution {
public:
    int partition(vector<int>& nums, int l, int r){
        int i = l;
        int partition = nums[r];
        
        for(int j = l;j <= r-1;j++){
            
            if(nums[j] < partition){
                swap(nums[i], nums[j]);
                i++;
            }
        }
        swap(nums[i],nums[r]);
        return i;
    }
    int findkth(vector<int>& nums, int low, int high, int k){
        if(k > 0 && k <= high-low+1){
            int p = partition(nums, low, high);
            
            if(p == low + k-1)
                return nums[p];
            else if(p > low + k-1)
                return findkth(nums, low, p-1, k);
            else
                return findkth(nums, p+1, high, k+low-p-1);
                
        }
        return INT_MAX;
    }
    int findKthLargest(vector<int>& nums, int k) {
        return findkth(nums, 0, nums.size()-1,nums.size()-k+1);
    }
};
