/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int time = 0;
    int timeTaken(TreeNode* root){
        if(!root)
            return 0;
        return 1 + max(timeTaken(root->left), timeTaken(root->right));
    }
    int helper(TreeNode* root, int start){
        if(!root){
            return -1;
        }
        if(root->val == start){
            int h = timeTaken(root) - 1;
            time = max(time, h);
            return 1;
        }
        else{
            int l = helper(root->left, start);
            if(l != -1){
                int h = timeTaken(root->right) + l;
                time = max(time, h);
                return l+1;
            }

            int r = helper(root->right, start);
            if(r != -1){
                int h = timeTaken(root->left) + r;
                //cout << h << "time" << endl;
                time = max(time, h);
                return r+1;
            }
        }
        return -1;
    }
    int amountOfTime(TreeNode* root, int start) {
        helper(root, start);
        return time;

    }
};
