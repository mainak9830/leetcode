class node {
    
public:
    int distance;
    int mask;
    int u;
    node(int distance, int mask, int u){
        this->distance = distance;
        this->mask = mask;
        this->u = u;
    }
};
class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        
        int n = graph.size();
        queue<node> queue;
        set<pair<int, int>> visited;

        for(int i = 0;i < n;i++){
            queue.push(node(0,1 << i, i));
            visited.insert({i, 1 << i});
        }

        while(!queue.empty()){

            auto node = queue.front();
            int u = node.u;
            int d = node.distance;
            int mask = node.mask;
            queue.pop();
            if(mask == (1 << n) - 1)
                return d;
            for(int v : graph[u]){
                int newMask = mask | 1 << v; 
                if(visited.count({v, newMask}) == 0){
                    queue.push({d+1, newMask, v});
                    visited.insert({v, newMask});
                }
            }
        }
        return -1;

    }
};
