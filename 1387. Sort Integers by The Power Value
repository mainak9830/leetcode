class Solution {
public:
    map<int,int> map;
    int countSteps(int n) {
        if(map.count(n))
            return map[n];
        if(n == 1)
            return 0;
        
        int c;
        if(n%2 == 0)
            c = countSteps(n/2);
        else
            c = countSteps(3*n+1);
        map[n] = c + 1;
        return map[n];
    }
    
    int getKth(int lo, int hi, int k) {
        vector<pair<int,int>> arr;
        
        for(int i = lo;i <= hi;i++){
            countSteps(i);
        }
        auto compare = [](pair<int,int> a, pair<int,int> b){
            if(a.first == b.first)
                return a.second < b.second;
            return (a.first < b.first);
        };

        priority_queue<pair<int,int>, vector<pair<int,int>>,decltype(compare)> pq(compare);
        
        for(int i = lo;i <= hi;i++){
            
            pq.push({map[i],i});
            if(pq.size() > k)
                pq.pop();
        }
            
        return pq.top().second;
    }
};
