class Solution {
public:
    typedef pair<int,int> pa;
    vector<int> getOrder(vector<vector<int>>& tasks) {
        vector<vector<int>> tasksUpdated;
        int n = tasks.size();
        map<int,vector<int>> jobs;
        for(int i = 0;i < n;i++){
            tasksUpdated.push_back(tasks[i]);
            tasksUpdated[i].push_back(i);
            jobs[i] = tasksUpdated[i];
        }

        sort(tasksUpdated.begin(), tasksUpdated.end());
        vector<int> ans;
        long long int time = 0;
        priority_queue<pa, vector<pa>, greater<pa>> minCostQueue;
        int i = 0;
        int task = 0;
        while(task < n){
            
            while(i < n && tasksUpdated[i][0] <= time){
                minCostQueue.push({tasksUpdated[i][1],tasksUpdated[i][2]});
                i++;
            }
            if(i < n && minCostQueue.empty()){
                time = tasksUpdated[i][0];
                continue;
            }
            pa job = minCostQueue.top();
            minCostQueue.pop();
            
            time += job.first;
            ans.push_back(job.second);
            task++;
        }

        return ans;

    }
};
