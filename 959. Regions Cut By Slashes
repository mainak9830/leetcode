class Solution {
public:
    vector<int> parents;
    void unionH(int x, int y){
        parents[find(x)] = find(y);
    }
    int find(int x){
        if(parents[x] != x)
            parents[x] = find(parents[x]);
        return parents[x];
    }
    int regionsBySlashes(vector<string>& grid) {
        int n = grid.size();
        parents.resize(4*n*n);
        
        for(int i = 0;i < parents.size();i++)
            parents[i] = i;
        
        for(int i = 0;i < n;i++){
            for(int j = 0;j < n;j++){
                int r = 4*(n*i+j);
                char c = grid[i][j];
                
                if(c == '/' || c == ' '){
                    unionH(r, r+3);
                    unionH(r+1, r+2);
                }
                
                if(c == '\\' || c == ' '){
                    unionH(r, r+1);
                    unionH(r+3, r+2);
                }
                if(j < n-1)
                    unionH(r+1, r+4+3);
                if(j > 0)
                    unionH(r+3, r-4+1);
                if(i > 0)
                    unionH(r, r-4*n+2);
                if(i < n-1)
                    unionH(r+2, r+4*n);
                 
            }
        }
        
        int cnt = 0;
        for(int i = 0;i < parents.size();i++){
            if(find(i) == i)
                cnt++;
        }
        
        return cnt;
    }
};
