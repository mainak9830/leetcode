/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */

class NestedIterator {
public:
    stack<NestedInteger> stack;

    NestedIterator(vector<NestedInteger> &nestedList) {
        
        for(auto it = nestedList.rbegin();it != nestedList.rend();it++){
            stack.push(*it);
        }
        // stack.push(dynamic_cast<NestedInteger>(nestedList));
    }
    
    int next() {
        
        
        auto topNestedEl = stack.top();
        stack.pop();
        return topNestedEl.getInteger();

    }
    
    bool hasNext() {
        while(not stack.empty()){
            auto topNestedEl = stack.top();
            
            if(topNestedEl.isInteger()){
                break; 
            }
            stack.pop();
            
            auto topList = topNestedEl.getList();
            for(auto it = topList.rbegin();it != topList.rend();it++)
                stack.push(*it);
        
            
        }

        return not stack.empty();
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
