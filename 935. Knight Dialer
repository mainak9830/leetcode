class Solution {
public:
    int knightDialer(int n) {
        int MOD = 1e9 + 7;
        map<int, vector<int>> state_jump;
        state_jump[0] = {4, 6};
        state_jump[1] = {6, 8};
        state_jump[2] = {7, 9};
        state_jump[3] = {4, 8};
        state_jump[4] = {9, 3, 0};
        state_jump[5] = {};
        state_jump[6] = {0, 1, 7};
        state_jump[7] = {2, 6};
        state_jump[8] = {1, 3};
        state_jump[9] = {4, 2};

        
        vector<int> digit_count(10, 1);


        for(int i=2;i <= n;i++){
            vector<int> current_digit_count(10, 0);
            for(int key = 0;key < 10;key++){
                for(int nextDigit : state_jump[key])
                    current_digit_count[nextDigit] = (current_digit_count[nextDigit] + digit_count[key])%MOD;
            }
            digit_count = current_digit_count;
        }

        int ans = 0;
        for (int square = 0; square < 10; square++) {
            ans = (ans + digit_count[square]) % MOD;
        }
        return ans;
    }
};
