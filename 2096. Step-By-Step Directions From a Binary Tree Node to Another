/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string getDirections(TreeNode* root, int startValue, int destValue) {
        TreeNode* head = LCA(root,startValue, destValue);
        
        string left = "";
        getPath(head, left, startValue);
        string right = "";
        getPath(head, right, destValue);
        string left_u = "";
        for(int i = 0;i < left.length();i++)
            left_u += 'U';
        return left_u + right;
    }
    bool getPath(TreeNode* root, string& path, int target){
        if(root == NULL)
            return false;
        
        if(root->val == target)
            return true;
        path += "L";
        if(getPath(root->left, path, target))
            return true;
        path.pop_back();
        path += "R";
        if(getPath(root->right, path, target))
            return true;
        path.pop_back();
        
        return false;
    }
    TreeNode* LCA(TreeNode* root, int left, int right) {
        if(!root)
            return root;
        
        if(root->val == left || root->val == right)
            return root;
        TreeNode* l = LCA(root->left, left, right);
        TreeNode* r = LCA(root->right, left, right);
        
        if(l && r)
            return root;
        return l ? l : r;
        
    }
};
