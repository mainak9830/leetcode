/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int calHeight(TreeNode* root){
        int h = 0;
        while(root){
            h++;
            root = root->left;
        }
        
        return h;
            
    }
    bool found(int target, TreeNode* root, int h){
        int low = 1;
        int high = (int)pow(2,h-1);
        
        for(int i = 1;i <= h-1;i++){
            int mid = low + (high-low)/2;
            
            if(target > mid){
                low = mid+1;
                root = root->right;
            }
            else{
                high = mid-1;
                root = root->left;
            }
        }
        //cout << "idx" << target << "root check: " << (root ? root->val : -1) << endl;
        return root != NULL;
        
    }
    
    int countNodes(TreeNode* root) {
        if(root == NULL)
            return 0;
        
        int h = calHeight(root);
        
        
        int left = 1;
        int right = (int)pow(2,h-1);
        
        while(left <= right){
            int mid = left + (right-left)/2;
            if(found(mid, root, h))
                left = mid+1;
            else
                right = mid-1;
        }
        
        return right + (int)pow(2,h-1) - 1;
    }
};
