/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    int ans = 0;
    int dfs(Node* root){
        if(!root)return 0;
        vector<int> depths;
        for(auto node : root->children){
            depths.push_back(dfs(node));
        }
        int max_first = 0, max_second = 0;
        for(int i = 0;i < depths.size();i++){
            if(depths[i] >= max_first){
                max_second = max_first;
                max_first = depths[i];
            }else if(depths[i] >= max_second){
                max_second = depths[i];
            }
        }
        ans = max(ans, max_first + max_second + 1);
        return 1 + max(max_first, max_second);
    }
    int diameter(Node* root) {
        dfs(root);
        return ans - 1;
    }
};
