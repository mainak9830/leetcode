class Solution {
public:
    int maxMoves(vector<vector<int>>& grid) {
        
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n,0));
        // for(int i = m-2;i >= 0;i--){
        //     if(grid[i][n-1] < grid[i+1][n-1])
        //         dp[i][n-1] = dp[i+1][n-1] + 1;
        // }

        // for(int j = n-2;j >= 0;j--){
        //     if(grid[m-1][j] < grid[m-1][j+1])
        //         dp[m-1][j] = dp[m-1][j+1] + 1;
        // }

        for(int j = n-2;j >= 0;j--){
            for(int i = m-1;i >= 0;i--){
                if(i-1 >= 0 && grid[i-1][j+1] > grid[i][j])
                    dp[i][j] = max(dp[i-1][j+1] + 1, dp[i][j]);
                if(grid[i][j+1] > grid[i][j])
                    dp[i][j] = max(dp[i][j+1] + 1, dp[i][j]);
                if(i+1 < m && grid[i+1][j+1] > grid[i][j])
                    dp[i][j] = max(dp[i+1][j+1] + 1, dp[i][j]);
            }
        }

        int ans = 0;

        for(int i = 0;i < m;i++)
            ans = max(ans, dp[i][0]);

        return ans;
    }
};
