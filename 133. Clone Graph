/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    unordered_map<int, Node*> map;
    
    Node* cloneDFS(Node *node){
        if(map.count(node->val)){
            return map[node->val];
        }
        
        map[node->val] = new Node(node->val);
        
        for(auto v : node->neighbors){
            map[node->val]->neighbors.push_back(cloneDFS(v));
        }
        
        return map[node->val];
    }
    Node* cloneGraph(Node* node) {
        if(node == NULL)
            return NULL;
        
        return cloneDFS(node);
        
    }
};
