class Solution {
public:
    int calculateProfit(int i, vector<int>& prices, int bought){
        int n = prices.size();
        if(i == n)return 0;

        if(bought == false){
            return max(-prices[i] + calculateProfit(i+1, prices, true), calculateProfit(i+1, prices, false));
        }

        return max(prices[i] + calculateProfit(i+1, prices, false), calculateProfit(i+1, prices, true));


    }
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        //return calculateProfit(0, prices, false);
        vector<vector<int>> dp(n+1, vector<int>(2, 0));
        dp[1][0] = 0;
        dp[1][1] = -prices[0];
        for(int i = 2;i <= n;i++){
            //0 not bought earlier till i
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i-1]);
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i-1]);
        }

        return max(dp[n][0], dp[n][1]);
    }
};
