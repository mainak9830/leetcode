class Solution {
public:
    void dfs(vector<vector<char>>& board, int i, int j) {
        int m = board.size();
        int n = board[0].size();
        
        if(i < 0 || j < 0 || i >= m || j >= n || board[i][j] != 'O')
            return;
        board[i][j] = 'E';
        vector<vector<int>> directions =  {{-1,0}, {1, 0}, {0, 1}, {0,-1}};
        for(auto d : directions){
            dfs(board, i + d[0], j + d[1]);
        }
        
        
    }
    void solve(vector<vector<char>>& board) {
        int m = board.size();
        int n = board[0].size();
        vector<vector<int>> points;
        for(int i = 0; i < m;i++){
            points.push_back({i,0});
            points.push_back({i,n-1});
        }
        
        for(int i = 0; i < n;i++){
            points.push_back({0,i});
            points.push_back({m-1,i});
        }
        
        for(auto point : points){
            dfs(board, point[0], point[1]);
        }
        
        for(int i = 0;i < m;i++){
            for(int j = 0;j < n;j++){
                if(board[i][j] == 'O')
                    board[i][j] = 'X';
                else if(board[i][j] == 'E')
                    board[i][j] = 'O';
            }
        }
    }
};
