struct Node {
    Node *links[2];
    
    bool containsKey(int bit){
        return links[bit] != NULL;
    }
        
    
    Node *get(int bit){
        return links[bit];
    }
        
    
    void put(int bit, Node *node){
        links[bit] = node;
    }
        
};
class Trie{
    
public:
    Node *root;
    
    Trie(){
        root = new Node();
    }

    
    void insert(int num){
        Node *node = root;
        for(int i = 31;i >= 0;i--){
            int bit = (num >> i) & 1;
            
            if(!node->containsKey(bit)){
                node->put(bit, new Node());
            }
            
            node = node->get(bit);
        }
    }
    
    int getMax(int num){
        
        Node *node = root;
        int maxNum = 0;
        for(int i = 31;i >= 0;i--){
            int bit = (num >> i) & 1;
            
            if(node->containsKey(1-bit)){
                node = node->get(1-bit);
                maxNum = maxNum | (1 << i);
            }
            else{
                node = node->get(bit);
            }
            
            
        }
        return maxNum;
    }
    
};
class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        int n = nums.size();
        Trie trie;
        int ans = 0;
        for(int i = 0;i < n;i++)
            trie.insert(nums[i]);
        
        for(int i = 0;i < n;i++){
            ans = max(ans, trie.getMax(nums[i]));
        }
        return ans;
        
    }
};
