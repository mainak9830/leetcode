class Solution {
public:
    long long time(vector<int> &piles, int k){
        long long t = 0;
        for(int i = 0;i < piles.size();i++){
            if(piles[i] % k == 0)
                t += (1LL)*piles[i] / k;
            else
                t += (1LL)*piles[i]/k + 1;
        }
        
        return t;
    }
    int minEatingSpeed(vector<int>& piles, int h) {
        
        int low = 1;
        int high = piles[0];
        
        int n = piles.size();
        int total = 0;
        for(int i = 0;i < n;i++){
            low = min(low, piles[i]);
            high = max(high, piles[i]);
            //total += piles[i];
        }
        
        while(low <= high){
            
            int mid = low + (high-low)/2;
            
            if(h >= time(piles, mid))
                high = mid - 1;
            else
                low = mid + 1;
            
        }
        
        return low;
    }
};
