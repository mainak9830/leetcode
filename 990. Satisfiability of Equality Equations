class Solution {
public:
    
    void Union(vector<int>& parent, int x, int y){
        int parent1 = find(parent, x);
        int parent2 = find(parent, y);

        if(parent1 != parent2){
            parent[parent1] = parent2;
        }
    }
    int find(vector<int>& parent, int x){
        if(parent[x] != x){
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
    }
    bool equationsPossible(vector<string>& equations) {
        vector<int> parent(26);

        for(int i = 0;i < 26;i++)
            parent[i] = i;

        for(string equation : equations){
            if(equation[1] == '='){
                Union(parent, equation[0]-'a', equation[3]-'a');
            }
        }

        for(string equation : equations){
            if(equation[1] == '!'){
                if(find(parent, equation[0]-'a') == find(parent, equation[3]-'a'))
                    return false;
            }
        }

        return true;
    }
};
