class Solution {
public:
    vector<int> states;
    vector<bool> seen;
    vector<vector<int>> g;
    bool dfs(int u, vector<bool>& visited){
        if(visited[u])
            return false;
        if(seen[u])
            return states[u];
        
        visited[u] = true;
        seen[u] = true;
        for(int v : g[u]){

            states[v] = dfs(v, visited);
            if(!states[v])
                return states[v];
            
            
        }
        visited[u] = false;
        return true;
    }
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        g = graph;
        states.resize(graph.size(), true);
        seen.resize(graph.size(), false);

        for(int i = 0;i < graph.size();i++){
            if(!seen[i]){
                vector<bool> vis(graph.size(), false);
                states[i] = dfs(i, vis);
            }

        }

        vector<int> answer;
        for(int i = 0;i < graph.size();i++){
            if(states[i]){
                answer.push_back(i);
            }

        }

        return answer;
    }
};
