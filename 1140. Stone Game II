class Solution {
public:
    int dp[101][201];
    int helper(int i, int M, vector<int>& p){
        if(i >= p.size())
            return 0;
        if(dp[i][M] != -1)
            return dp[i][M];
        int total = 0;
        int maxT = INT_MIN;
        for(int j = 0;j < 2*M;j++){
            if(i+j < p.size()){
                total += p[i+j];
                maxT = max(maxT, total - helper(i+j+1, max(M, j+1), p));
            }

        }
        dp[i][M] = maxT;
        return maxT;
    }
    int stoneGameII(vector<int>& piles) {
        memset(dp,-1,sizeof(dp));
        int diff = helper(0, 1, piles);
        int sum = 0;
        
        for(int p : piles)
            sum += p;

        return (sum + diff)/2;
    }
};
