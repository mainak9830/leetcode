class Solution {
public:
    double calculateTime(vector<int>& dist, int speed){
        int n = dist.size();
        double time = 0;
        for(int i = 0;i < n;i++){
            time += (i == n-1) ? (double)dist[i]/speed : ceil((double)dist[i]/speed);
        }
        cout << speed << " " << time << endl;
        return time;
    }
    int minSpeedOnTime(vector<int>& dist, double hour) {
        int n = dist.size();
        int lspeed = 1;
        int hspeed = *max_element(dist.begin(), dist.end());
        double lastMaxTime = hour - (n-1);
        if(lastMaxTime <= 0)
            return -1;
        hspeed = max(hspeed, (int)ceil((double)dist[n-1]/lastMaxTime));
        // cout << hspeed << endl;
        while(lspeed <= hspeed){
            int mspeed = lspeed + (hspeed-lspeed)/2;
            double tmid = calculateTime(dist, mspeed);

            if(tmid > hour){
                lspeed = mspeed + 1;
            }else{
                hspeed = mspeed - 1;
            }
        }

        return lspeed;
    }
};
