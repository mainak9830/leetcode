//Attempt 1
class Solution {
public:
    double Pow(double x, long n){
        if(n == 0)
            return 1;
        else if(n < 0)
            return 1.0 / Pow(x,-n);
        else if(n%2 == 0)
        {
            double p = Pow(x,n/2);
            return p*p;
        }
        else{
            double p = Pow(x,n/2);
            return p * p * x;
        }
        
    }
    double myPow(double x, int n) {
        return Pow(x,n);
    }
};
//Attempt 2 without recursion

class Solution {
public:
    
    double myPow(double x, int n) {
        long nn = n;
        double ans = 1;
        if(n < 0) 
            nn = -nn;
        double temp = x;
        while(nn > 0){
            if(nn & 1 == 1){
                nn = nn - 1;
                ans = ans * temp;
            }else{
                temp = temp * temp;
                nn = nn >> 1;
            }
        }
        if(n < 0) ans = 1.0/ans;
        return ans;
    }
};
