class Solution {
public:
    bool check(int x, int y, int m, int n){
        if(x < 0 || y < 0 || x >= m || y >= n)
            return false;
        return true;
    }
    int bfs(vector<vector<char>>& grid, int x, int y){
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> seen(m, vector<int>(n,-1));
        queue<pair<int,int>> queue;
        queue.push({x,y});
        seen[x][y] = 1;
        int depth = 0;
        while(!queue.empty()){
            int size = queue.size();
            for(int i = 1;i <= size;i++){
                pair<int,int> cor = queue.front();
                queue.pop();
                int x1 = cor.first;
                int y1 = cor.second;
                
                vector<vector<int>> direc = {{0,1}, {1,0}, {-1,0}, {0,-1}};
                cout << x1 <<  " " << y1 << endl;
                for(vector<int> d : direc){
                    if(!check(x1+d[0],y1+d[1],m,n))
                        continue;
                    if(grid[x1+d[0]][y1+d[1]] == '#')
                        return depth+1;
                    if(grid[x1+d[0]][y1+d[1]] == 'O' && seen[x1+d[0]][y1+d[1]] == -1){
                        queue.push({x1+d[0], y1+d[1]});
                        seen[x1+d[0]][y1+d[1]] = 1;
                    }
                }
                
            }
            depth++;
        }

        return -1;
    }
    int getFood(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        for(int i = 0;i < m;i++){
            for(int j = 0;j < n;j++){
                if(grid[i][j] == '*')
                    return bfs(grid, i, j);

            }
        }

        return -1;
    }
};
