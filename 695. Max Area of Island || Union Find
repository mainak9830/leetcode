class DSU {
public:
    int *parent, *rank;
    DSU(int size){
        parent = new int[size];
        rank = new int[size];
        for(int i = 0;i < size;i++){
            parent[i] = i;
            rank[i] = 1;
        }
    }

    int Union(int x, int y){
        int v1 = find(x);
        int v2 = find(y);
        if(v1 == v2)
            return rank[v1];
        if(rank[v1] < rank[v2]){
            parent[v1] = v2;
            rank[v2] += rank[v1];
            return rank[v2];
        }
        
        parent[v2] = v1;
        rank[v1] += rank[v2];
        return rank[v1];

    }

    int find(int x){
        if(x != parent[x])
            parent[x] = find(parent[x]);
        return parent[x];
    }
};
class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        DSU dsu(m*n);
        int nodes = 0;
        
        for(int i = 0;i < m;i++){
            for(int j = 0;j < n;j++){

                if(grid[i][j] == 0)
                    continue;
                
                if(i < m-1 && grid[i+1][j])
                    nodes = max(nodes, dsu.Union((i+1) * n + j, i * n + j));
                if(i > 0 && grid[i-1][j])
                    nodes = max(nodes, dsu.Union((i-1) * n + j, i * n + j));
                if(j > 0 && grid[i][j-1])    
                    nodes = max(nodes, dsu.Union(i * n + j - 1, i * n + j));
                if(j < n-1 && grid[i][j+1])
                    nodes = max(nodes, dsu.Union(i * n + j + 1, i * n + j));

                nodes = max(nodes, dsu.Union(i * n + j, i * n + j));
            }
        }
        return nodes;
    }
};
