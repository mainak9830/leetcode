class Solution {
public:
    map<int, int> cache;
    int gcd(int a, int b){
        if(b == 0)
            return a;
        if(a < b)
            return gcd(b, a);
        return gcd(b, a % b);
    }
    int bruteforce(vector<int>& nums, int bitmask, int level){
        int n = nums.size();
        if(bitmask == ((1 << n)-1))
            return 0;
        if(cache.count(bitmask))
            return cache[bitmask];
        
        int maxi = 0;
        for(int i = 0;i < n;i++){
            for(int j = i+1;j < n;j++){
                if(((1 << i) & bitmask) || ((1 << j) & bitmask))
                    continue;
                
                int newmask = bitmask | (1 << i) | (1 << j); 
                maxi = max(maxi, level*gcd(nums[i],nums[j]) + bruteforce(nums, newmask, level+1));

                // cout << maxi << endl;
                
            }
        }
        cache[bitmask] = maxi;
        return maxi;
    }
    int maxScore(vector<int>& nums) {
        return bruteforce(nums, 0, 1);
    
    }
};
