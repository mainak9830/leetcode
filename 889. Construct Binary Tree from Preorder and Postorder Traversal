/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int n;
    TreeNode* buildTree(vector<int>& preorder, vector<int>& postorder, int prel, int preh, int pol, int poh) {
        
        if(pol > poh || prel > preh)
            return NULL;
        TreeNode *root = new TreeNode(preorder[prel]);
        cout << root->val << endl;
        if(prel == preh || pol == poh)
            return root;
        int q = preorder[prel+1];
        int idx = pol;
        while(idx < poh){
            if(postorder[idx] == q)
                break;
            idx++;
        }
        int len = idx - pol + 1;
        root->left = buildTree(preorder, postorder, prel + 1, prel+len, pol, idx);
        root->right = buildTree(preorder, postorder, prel+len+1, preh, idx+1, poh-1);
        return root;
    }
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        n = preorder.size();

        return buildTree(preorder, postorder, 0, n-1, 0, n-1);
    }
};
