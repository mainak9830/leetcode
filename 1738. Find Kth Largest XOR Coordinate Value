class Solution {
public:
    int kthLargestValue(vector<vector<int>>& matrix, int k) {
        int m = matrix.size();
        int n = matrix[0].size();

        vector<vector<int>> prefix(m+1, vector<int>(n+1, 0));

        for(int i = 0;i < m;i++){
            for(int j = 0;j < n;j++){
                prefix[i+1][j+1] = prefix[i][j]^prefix[i+1][j]^prefix[i][j+1]^matrix[i][j];

            }
        }

        priority_queue<int, vector<int>, greater<int>> pq;
        for(int i = 0;i < m;i++){
            for(int j = 0;j < n;j++){
                if(pq.size() < k)
                    pq.push(prefix[i+1][j+1]);
                else{
                    if(pq.top() < prefix[i+1][j+1]){
                        pq.pop();
                        pq.push(prefix[i+1][j+1]);
                    }
                }
            }
        }
        // while(pq.size() > 1){
        //     pq.pop();
        // }
        return pq.top();
    }
};
