// class Comp {
//     public:
//         int operator() (const pair<int,int>& p1, const pair<int,int>& p2){
//             cout << "fd";
//             return p1.first <= p2.first;
//         }
// };
class Solution {
public:
    int eatenApples(vector<int>& apples, vector<int>& days) {
        int n = apples.size();
        priority_queue< pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > pq;
        
        int ans = 0;
        for(int i = 0;i < n;i++){
            
            
            while(!pq.empty() && pq.top().first <= i+1){
                pq.pop();
            }
            if(days[i] > 0 && apples[i] > 0){
                
            pq.push({days[i]+i+1,apples[i]});
            }
            if(!pq.empty()){
                pair<int,int> t = pq.top();
            //cout << t.first << "days " << i << endl;
                pq.pop();
                if(t.second > 1){
                    pq.push({t.first, t.second-1});
                }
                ans++;
            }
            
            
        }
        cout << ans;
        int day = n+1;
        while(!pq.empty()){
            
            
            int t = min(pq.top().second, pq.top().first-day);
            ans += t;
            day = day + t; 
            //cout << day << " ";
            pq.pop();
            
        }
        
        return ans;
        
    }
};
