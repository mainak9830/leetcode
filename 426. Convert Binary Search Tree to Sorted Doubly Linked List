/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;

    Node() {}

    Node(int _val) {
        val = _val;
        left = NULL;
        right = NULL;
    }

    Node(int _val, Node* _left, Node* _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/

class Solution {
public:
    Node* treeToDoublyList(Node* root) {
        if(!root)
            return root;
        Node* head, *curr = root;
        Node* prev = NULL;
        Node* t = new Node(-1);
        Node* t_c = t;
        bool start = false;
        while(curr){
            if(curr->left){
                Node* prev = curr->left;
                Node* t = prev;
                while(prev->right)
                    prev = prev->right;
                curr->left = NULL;
                prev->right = curr;
                curr = t;
            }else{
                if(!start)
                    t->right = curr;
               curr->left = t;
               Node* next = curr->right;
               t = curr;
               if(!next)
                    break;
               curr = next;
               
            
            // curr = curr->right;

            }
        }
        Node* h = t_c->right;
        h->left = t;
        t->right = h;
        // Node* t = head;
        // do{
        //     cout << t->val;
        //     t = t->left;
        // }while(t != head);
        return h;
    }
};
