/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int target = 0;
    TreeNode* head;
    void dfs(TreeNode* root){
        if(!root)return;

        dfs(root->left);
        target += root->val;
        dfs(root->right);
    }
    bool passed = false;
    int traverse(TreeNode* root){
        if(!root)return 0;

        int sum = 0;
        sum += traverse(root->left);
        // if(2*sum == target){
        //     return sum;
        // }
        sum += traverse(root->right);
        // if(2*sum == target){
        //     return sum;
        // }
        sum += root->val;
        if(2*sum == target && root != head){
            passed = true;
            return sum;
        }
        return sum;

    }
    bool checkEqualTree(TreeNode* root) {
        head = root;
        dfs(root);   
        traverse(root);
        // cout << target << " " << endl; 
        return passed;
    }
};
