//Not possible with the implementation of factorial, need alternate implementation
class Solution {
public:
    int helper(vector<unsigned long long int> factorial, int n, int r){
        if(n <= 0)
            return 0;
        unsigned long long int x = factorial[n]/factorial[r];
        x = x / factorial[n-r];
        return (int)x;
    }
    string kthSmallestPath(vector<int>& destination, int k) {
        
        int hcount = destination[1];
        int vcount = destination[0];
        int n = hcount + vcount;
        vector<unsigned long long int> factorial(n+1,1);
        for(int i=1;i <= n;i++){
            factorial[i] = factorial[i-1] * i;
        }
        string ans = "";
        
        for(int i=1;i <= n;i++){
            if(hcount == 0){
                ans += 'V';
                vcount -= 1;
                continue;
            }
            if(vcount == 0){
                ans += 'H';
                hcount -= 1;
                continue;
            }
            int ways = helper(factorial, hcount+vcount-1, vcount-1);
            cout << ways << endl;
            if(k > ways){
                ans += 'V';
                vcount -= 1;
                k -= ways;
            }else{
                ans += 'H';
                hcount -= 1;
            }
            
            
        }
        
        return ans;
    }
};

//Right Solution Optimized
class Solution {
public:
    string kthSmallestPath(vector<int>& destination, int k) {
        int c = destination[1];
        int r = destination[0];
        vector<vector<int>> dp(r+1,vector<int>(c+1,1));
        
        for(int i = 1;i <= r;i++){
            for(int j = 1;j <= c;j++){
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        string ans = "";
        int x = r;
        int y = c;
        for(int i = 1;i <= r+c;i++){
            if(y == 0){
                ans += 'V';
                x -= 1;
                continue;
            }
            if(x == 0){
                ans += 'H';
                y -= 1;
                continue;
            }
            if(k > dp[x][y-1]){
                ans += 'V';
                k -= dp[x][y-1];
                x -= 1;
            }else{
                ans += 'H';
                y -= 1;
            }
            //cout << x << " " << y << endl;
        }
        return ans;
        
    }
};
