/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* findAncestor(TreeNode* node, set<TreeNode*> nodes){
        if(!node)
            return node;
        if(nodes.count(node)){
            nodes.erase(node);
            return node;
        }
        
        TreeNode* leftNode = findAncestor(node->left, nodes);
        TreeNode* rightNode = findAncestor(node->right, nodes);

        if(leftNode && rightNode)
            return node;
        return leftNode ? leftNode : rightNode; 
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, vector<TreeNode*> &nodes) {
        return findAncestor(root, set<TreeNode*>(nodes.begin(), nodes.end()));
    }
};
