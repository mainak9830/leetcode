class Solution {
public:
    int dfs(vector<vector<int>>& grid, int x, int y){
        int n = grid.size();
        int m = grid[0].size();
        
        if(x < 0 || y < 0 || x >= n || y >= m || grid[x][y] == 0)
            return 1;
        if(grid[x][y] == 2)
            return 0;
        
        int perimeter = 0;
        grid[x][y] = 2;
        perimeter += dfs(grid, x+1,y);
        perimeter += dfs(grid, x-1,y);
        perimeter += dfs(grid, x, y-1);
        perimeter += dfs(grid, x, y+1);
        
        return perimeter;
    }
    
    int islandPerimeter(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                if(grid[i][j] == 1)
                    return dfs(grid, i, j);
            }
        }
        
        
        return 0;
    }
};
