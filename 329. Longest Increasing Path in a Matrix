class Solution {
public:
    vector<vector<int>> dp;
    int dfs(vector<vector<int>>& matrix, int i, int j, int prev) {
        int m = matrix.size();
        int n = matrix[0].size();
        
        if(i < 0 || j < 0 || i >= m || j >= n || matrix[i][j] <= prev)
            return 0;
        if(dp[i][j] != -1)
            return dp[i][j];
        int x = dfs(matrix, i+1,j, matrix[i][j]);
        int y = dfs(matrix, i,j+1, matrix[i][j]);
        int z = dfs(matrix, i-1,j, matrix[i][j]);
        int k = dfs(matrix, i,j-1, matrix[i][j]);
        
        dp[i][j] = 1 + max({x,y,z,k});
        return dp[i][j];
        
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        
        int m = matrix.size();
        int n = matrix[0].size();
        
        dp.resize(m, vector<int>(n,-1));
        
        int ans = 0;
        for(int i = 0;i < m;i++){
            for(int j = 0;j < n;j++){
                ans = max(ans, dfs(matrix, i, j, matrix[i][j]-1));
                //cout << dp[i][j] << " ";
                
            }
            //cout << endl;
        }
        
        
        return ans;
    }
};
