//O(nlogk) priority queue
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<int, int> map;
        
        for(int i = 0;i < n;i++){
            map[nums[i]]++;
        }
        
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        
        for(auto p : map){
                
            if(pq.size() == k && pq.top().first < p.second){
                pq.pop();  
                pq.push({p.second, p.first});
            }
            else if(pq.size() < k)
                pq.push({p.second, p.first});
            
        }
        
        vector<int> ans;
        while(!pq.empty()){
            ans.push_back(pq.top().second);
            pq.pop();
        }
        return ans;
        
    }
};
