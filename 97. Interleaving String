class Solution {
public:
    // bool helper(string& s1, string& s2, string& s3, int i, int j, int k){
        
    //     if(i == s1.length())return s2.substr(j) == s3.substr(k);
    //     if(j == s2.length())return s1.substr(i) == s3.substr(k);

    //     if(s1[i] == s3[k] && helper(s1, s2, s3, i+1, j, k+1))return true;

    //     if(s2[j] == s3[k] && helper(s1, s2, s3, i, j+1, k+1))return true;

    //     return false;
        
    // }
    bool isInterleave(string s1, string s2, string s3) {
        // if(s1.length() + s2.length() != s3.length())return false;
        // return helper(s1, s2, s3, 0, 0, 0);
        int n1 = s1.size();
        int n2 = s2.size();
        int n3 = s3.size();
        if(n3 != n1+n2)return false;

        vector<vector<bool>> dp(n1+1, vector<bool>(n2+1, false));

        // i = 0, "abc"

        

        for(int i = 0;i <= n1;i++){
            for(int j = 0;j <= n2;j++){

                if(i == 0 && j == 0){
                    dp[i][j] = true;
                }else if(i == 0){
                    if(s2[j-1] == s3[i+j-1])
                        dp[i][j] = dp[i][j-1];
                }else if(j == 0){
                    if(s1[i-1] == s3[i+j-1])
                        dp[i][j] = dp[i-1][j];
                }else{
                    if(s2[j-1] == s3[i+j-1])
                        dp[i][j] = dp[i][j-1];
                    if(s1[i-1] == s3[i+j-1])
                        dp[i][j] = dp[i][j] | dp[i-1][j];
                }
            }
        }


        return dp[s1.length()][s2.length()];
    }
};
