/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Triple{
public:
    int min, max, count;
    Triple(int min, int max, int count){
        this->min = min;
        this->max = max;
        this->count = count;
    }
};
class Solution {
public:
    Triple largestBST(TreeNode* root){
        if(!root)return Triple(INT_MAX, INT_MIN, 0);
        //leaf node
        //if(!root->left && !root->right)return Triple(root->val, root->val, 1);
        
        Triple  left = largestBST(root->left);
        
        Triple right = largestBST(root->right);
        if(left.max >= root->val || right.min <= root->val)return {INT_MIN, INT_MAX, max(left.count, right.count)};
        
        
        return Triple(min(left.min, root->val), max(right.max,root->val), left.count + right.count + 1);
        
    }
    int largestBSTSubtree(TreeNode* root) {
        int ans = 0;
        return largestBST(root).count;
        
    }
};
