from collections import defaultdict
class UF:
    def __init__(self, n: int):
        self.rank = [0]*n
        self.parent = [i for i in range(n)]
        
    
    def union(self, u: int, v: int) -> None:
        pu = self.find(u)
        pv = self.find(v)

        if pu != pv:
            if self.rank[pu] > self.rank[pv]:
                self.parent[pv] = pu
            elif self.rank[pv] > self.rank[pu]:
                self.parent[pu] = pv
            else:
                self.parent[pu] = pv
                self.rank[pv] += 1
    
    def connected(self, u: int, v: int)->bool:
        return self.find(u) == self.find(v)

    def find(self, u: int) -> int:
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])
        return self.parent[u]

    def reset(self, x: int)->None:
        self.parent[x] = x
        self.rank[x] = 0


class Solution:
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        
        meetings.sort(key=lambda x: x[2])
        d = defaultdict(lambda: [])
        for meeting in meetings:
            d[meeting[2]].append([meeting[0], meeting[1]])
        
        knows = set()
        
        uf = UF(n)

        uf.union(0, firstPerson)
        for t in d.keys():
            print(t)
            for x, y in d[t]:
                uf.union(x, y)

            for x, y in d[t]:
                if not uf.connected(x, 0):
                    uf.reset(x)
                    uf.reset(y)
            

        
        return [i for i in range(n) if uf.connected(0, i)]

        
