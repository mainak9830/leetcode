struct Node{
    Node *link[26];
    int end = 0;
    int count = 0;
    
    bool contains(char c){
        return (link[c-'a'] != NULL);
    }
        
    void put(char c){
        Node *n = new Node();
        link[c-'a'] = n;   
    }
    Node *get(char c){
         return link[c-'a'];
    }
       
    void endWord(){
        end++;
    }
    void reduceEnd(){
        end--;
    }
    int endCount(){
        return end;
    }
        
    void addCount(){
        count++;
    }
        
    int getCount(){
        return count;
    }
        
    void minusCount(){
        count--;
    }
        
    void destroyNode(char c){
        link[c-'a']->minusCount();
        if(link[c-'a']->getCount() == 0)
            link[c-'a'] = NULL;
    }
};

class Trie{
    private:
    Node *root;
    public:

    Trie(){
        // Write your code here.
        root = new Node();
    }

    void insert(string &word){
        // Write your code here.
        int n = word.size();
        Node *node = root;
        
        for(int i = 0;i < n;i++){
            if(!node->contains(word[i])){
                node->put(word[i]);
            }
            
            node = node->get(word[i]);  
            node->addCount();
        }
        node->endWord();
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        int n = word.size();
        Node *node = root;
        
        for(int i = 0;i < n;i++){
            if(!node->contains(word[i])){
                return 0;
            }
            node = node->get(word[i]);    
        }
        return node->endCount();
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
        int n = word.size();
        Node *node = root;
        
        for(int i = 0;i < n;i++){
            if(!node->contains(word[i])){
                return 0;
            }
            node = node->get(word[i]);    
        }
        
        //cout << ans;
        return node->getCount();
    }
    void eraseR(string word, int i, Node *node){
        int n = word.size();
        if(i == n){
            
            node->reduceEnd();
            return;
        }
            
        eraseR(word,i+1,node->get(word[i]));
        node->destroyNode(word[i]);
    }
    void erase(string &word){
        // Write your code here.
        eraseR(word,0, root);
        /*int n = word.size();
        Node *node = root;
        for(int i = 0;i < n;i++){
            node = node->get(word[i]);
            node->minusCount();
        }
        node->reduceEnd();
        */
        
    }
};
