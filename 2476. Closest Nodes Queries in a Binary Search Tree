/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> sorted;
    void traverse(TreeNode* root){
        if(!root)return;
        traverse(root->left);
        sorted.push_back(root->val);
        traverse(root->right);
    }
    vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {
        traverse(root);
        int n = sorted.size();
        vector<vector<int>> ans;
        for(auto query : queries){
            int left, right;
            auto it = lower_bound(sorted.begin(), sorted.end(), query);
            // auto right_it = upper_bound(sorted.begin(), sorted.end(), query);
            int index = it - sorted.begin();
            if(index < n and sorted[index] == query){
                left = query;
                right = query;
            }else if(index == n){
                left = sorted[index-1];
                right = -1;
            }else if(index == 0){
                left = -1;
                right = sorted[index];
            }else{
                left = sorted[index-1];
                right = sorted[index];
            }
            ans.push_back({left, right});
        }

        return ans;
    }
};
